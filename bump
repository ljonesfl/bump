#!/usr/bin/ruby

require 'json'
require 'optparse'

class Version

  VERSION_FILE = '.version.json'

  def initialize
    @major = 0
    @minor = 0
    @patch = 0
    @build = 0
  end

  def load(file = Version::VERSION_FILE )
    if !File.file?(file)
      raise file + " not found."
    end

    @file = file
    @parts = JSON.parse(File.read(file))

    @major = @parts['major'].to_i
    @minor = @parts['minor'].to_i
    @patch = @parts['patch'].to_i
    @build = @parts['build'].to_i
  end

  def bump_major
    @major += 1
    @minor = 0
    @patch = 0
    @build = 0
  end

  def bump_minor
    @minor += 1
    @patch = 0
    @build = 0
  end

  def bump_patch
    @patch += 1
    @build = 0
  end

  def bump_build
    @build += 1
  end

  def string
    text = @major.to_s + '.' + @minor.to_s + '.' + @patch.to_s

    if @build > 0
      text = text + ' (' + @build.to_s + ')'
    end

    text
  end

  def write( file = '' )
    ver = {
        "major" => @major,
        "minor" => @minor,
        "patch" => @patch,
        "build" => @build
    }

    if file != ''
      @file = file
    end

    File.open (@file, "w") do |f|
      f.write(ver.to_json)
    end
  end
end

opts = {
          :major => false,
          :minor => false,
          :patch => false,
          :build => false,
          :file => Version::VERSION_FILE,
}

optparse = OptionParser.new do |options|
  options.on('-h', '-?', '--help', 'Show help.') do
    puts options
    exit
  end

  options.on('-n', '--new', 'Create new version.json.')
    opts[:new] = true
  end

  options.on('-a', '--major', 'Bump major number.') do
    opts[:major] = true
  end

  options.on('-m', '--minor', 'Bump minor number.') do
    opts[:minor] = true
  end

  options.on('-p', '--patch', 'Bump patch number.') do
    opts[:patch] = true
  end

  options.on('-b', '--build', 'Bump build number.') do
    opts[:build] = true
  end

  options.on('-f', '--file', String, 'Specify file. (defaults to ./version.json )') do |name|
    opts[:name] = name
  end

end

optparse.parse($*)

ver = Version.new()

if opts[:new]
    ver.write( "version.json" )
    p "File created."
else
  begin
    ver.load( opts[:file] )
  rescue Exception => e
    p e.message
  end
end

write = false

if opts[:major]
  ver.bump_major
  write = true
end

if opts[:minor]
  ver.bump_minor
  write = true
end

if opts[:patch]
  ver.bump_patch
  write = true
end

if opts[:build]
  ver.bump_build
  write = true
end

if write
  ver.write
end

puts ver.string
